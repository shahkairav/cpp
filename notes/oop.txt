- Essence: 
  - Stick to what you do. Every class takes care of its own business.
  - A class should only have a single responsibility. Avoid swiss knives.

- Access modifiers:
  - Public: accessible by anyone
  - Protected: accessible by the class itself and the derived classes
  - Private: accessed by the class itself (i.e., other instance objects can access the member variables too)

- There is no default initialization for primitive types if not initialized.

- Keep your data members private unless necessary.

- Member functions do not contribute to the size of the object.

- Object size:
  - size of all members including the parent classes.
  - may have a pointer to vtable; __vptr
  - may include padding.

- Methods that are defined in the class definition itself (probably in a header file) are by default inlined by the compiler.

- this: is a pointer to the calling object.

- Constructors:
  - no constructors at all ==> empty constructor by default; calls empty constructors of the base class and the members.
  - no empty constructor ==> must pass parameters
  - Since C++11, can call another constructor; called CTOR DELEGATION
  - Use default arguments
  - Ctor initialization list: used for initialization of members and base classes.
    - efficiency
    - correctness
    - must use if:
      a) contained object with no deefault ctor and no initialization on declaration
      b) contained const data member
      c) contained reference date member
      d) base class with no default ctor
    - members are initialized in the order of declaration in the class.

- Constructor delegation example:
  Rectangle(int x1, int y1, int x2, int y2): Rectangle(Point(x1, y1), Point(x2, y2)) {}

- Copy Constructor:
  - Syntax: A::A(const A& a);
  - Default copy ctor does a memberwise copy
  - Used when an object is passed by value. Except:
    - copy elision:
    - return value optimisation: 

- Copy assignment operator:
  - Syntax: A& A::operator=(const A& a);

- Implicit casting works only for constant reference or for byval but not for byref.
  - This behaviour can be prevented by adding the explicit keyword to the constructor.
  - NOTE: It's okay to allow implicit construction if the arguments passed provide full state of the object.
    - For example: string creation using a const char* is fine. However, implicitly creating a vector from an int by calling the Vector(int size) constructor is not something intended and should be used with the explicit keyword. 

- Mutable keyword is used to mark member variables that can be changed even in const functions.
  - Members that are not part of the state of the object can be marked mutable.
    For example: For a vector class, only the size and the array constitute the state of the object, and members such as sum can be marked mutable.

- Rule of Zero:
  - best if the class doesn't need any resource management.
  - can be achieved by using properly managed data members such as string, containers, and smart pointers.

- Rule of Three:
  - If you need a destructor, always implement the copy ctor and assignment operator too.

- Rule of Five:
  - If you implement the Rule of Three, ask back for defaults for the move constructor and move assignment operator.

--> Inheritance:
- 

- Copy and Swap Idiom:
  - not very encouraged.

- PImpl Idiom:
